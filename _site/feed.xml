<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-16T10:32:05-04:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Recurse 02 (R, wavey!)</title><link href="http://localhost:4000/2019/10/11/recurse-02-(R-wavey).html" rel="alternate" type="text/html" title="Recurse 02 (R, wavey!)" /><published>2019-10-11T00:00:00-04:00</published><updated>2019-10-11T00:00:00-04:00</updated><id>http://localhost:4000/2019/10/11/recurse-02-(R-wavey)</id><content type="html" xml:base="http://localhost:4000/2019/10/11/recurse-02-(R-wavey).html">&lt;div class=&quot;post&quot;&gt;
&lt;p&gt;This week, I completed project 3 of Nand2Tetris, learned some deeper fundamentals of statistical learning in R, and wrote my first interactive thing in D3.
    
&lt;p&gt;&lt;a href=&quot;https://d3js.org/&quot;&gt;D3.js&lt;/a&gt; is a widely used javascript library for creating beautiful, interactive visualizations on the web. I made quite a simple interactive sine wave plotter, but the exercise took hours and really helped me gain insight in to D3's declarative approach to data-centric object manipulation. Code for the thing &lt;a href=&quot;https://gist.githubusercontent.com/robinovitch61/5b61f550b3b0cd279c6e8a3679a9623e/raw/d8dfa4ee588339bae1ae60d0f0e60be68f4d3ba6/d3_sine_wave.html&quot;&gt;here&lt;/a&gt;. Play with it &lt;a href=&quot;https://jsfiddle.net/robinovitch61/3nwjzkdx/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/images/d3-sine.gif&quot; alt=&quot;d3 sine wave gif&quot;&gt;
    &lt;figcaption class=&quot;figcaption-text&quot;&gt;D3 Makin Waves&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;R is a tool for statistical computing and visualization. It is often used in research and many awesome data scientists work in both python or R depending on the application. Much like python, there have been a huge number of tools and packages built for and on top of R (matplotlib = ggplot2, Plotly's Dash = Rstudio's Shiny, Jupyter Notebooks = R Markdown, etc.)&lt;/p&gt;

&lt;p&gt;I was hesitant on learning R because so much of the language has a python analog and I'm already proficient in python. After some conversation and reflection though, it does seem like a good thing to learn. The language of R is geared explicitly towards statistics. As a basic example, here is how to get 100 samples from a normal distribution with zero mean and unity variance in each language:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# python
import numpy as np # could also use a scipy function
np.random.normal(loc=0, scale=1, size=100)&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;# R
rnorm(n=100, mean=0, sd=1)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It's not just that it's 2 lines of code versus 1. It's that &lt;code&gt;rnorm&lt;/code&gt; is built in to the standard library in R whereas in python you have to import a package like &lt;code&gt;numpy&lt;/code&gt; or &lt;code&gt;scipy&lt;/code&gt;. I use these packages so much in python that I sometimes forget they're not in the standard library! This reinforces the premise that &lt;i&gt;python is the second best language for everything&lt;/i&gt;. R should help me think statistically as it is a language primarily written for statistical thinking.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/images/r-bane.png&quot; alt=&quot;R is like Bane&quot;&gt;
    &lt;figcaption class=&quot;figcaption-text&quot;&gt;In response to PythonMan&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I was alternatingly enthralled by and so frustrated with the textbook &lt;a href=&quot;http://faculty.marshall.usc.edu/gareth-james/ISL/&quot;&gt;An Introduction to Statistical Learning&lt;/a&gt; this week. The second chapter is so methodical in describing intuition for general model fitting, the bias-variance tradeoff, what model flexibility implies - all these great fundamental concepts! Then the third chapter seems to try to summarize all of mankind's theory on linear regression in 60 quite dense, sometimes incomprehensible pages...enter the frustration.&lt;/p&gt;

&lt;p&gt;In our Machine Learning meetup group, the group was split on the textbook. I've come to the conclusion that I'll just have to take it slower and reference outside resources when required. Two chapters/week is way too ambitious. I'll take the R exercises seriously and try to do derivations and note taking myself as required.&lt;/p&gt;

&lt;p&gt;The way I'm seeing things is the interactive data viz/web dev stuff is fun and lighter, the stats fundamentals is hard and necessary, and Nand2Tetris is perfectly balanced between the two. There's definitely the ongoing struggle with wanting to learn more, faster, but someone referenced Plato in their technical presentation this week and it was quite helpful:&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Never discourage anyone who continually makes progress, no matter how slow... even if that someone is yourself!&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Onward!&lt;/p&gt;</content><author><name></name></author><summary type="html">This week, I completed project 3 of Nand2Tetris, learned some deeper fundamentals of statistical learning in R, and wrote my first interactive thing in D3. D3.js is a widely used javascript library for creating beautiful, interactive visualizations on the web. I made quite a simple interactive sine wave plotter, but the exercise took hours and really helped me gain insight in to D3's declarative approach to data-centric object manipulation. Code for the thing here. Play with it here.</summary></entry><entry><title type="html">Recurse 01 (logic immunity)</title><link href="http://localhost:4000/2019/10/04/recurse-01-(logic-immunity).html" rel="alternate" type="text/html" title="Recurse 01 (logic immunity)" /><published>2019-10-04T00:00:00-04:00</published><updated>2019-10-04T00:00:00-04:00</updated><id>http://localhost:4000/2019/10/04/recurse-01-(logic-immunity)</id><content type="html" xml:base="http://localhost:4000/2019/10/04/recurse-01-(logic-immunity).html">&lt;div class=&quot;post&quot;&gt;
&lt;p&gt;I have been learning about basic computer architecture (logic gates) and working on a herd immunity simulation.&lt;/p&gt;

&lt;p&gt;Computer architecture work has come from the awesome &lt;a href=&quot;https://www.nand2tetris.org/&quot;&gt;Nand2Tetris course&lt;/a&gt; by Shimon Schocken and Noam Nisan. Shimon has &lt;a href=&quot;https://www.ted.com/talks/shimon_schocken_the_self_organizing_computer_course?language=pt&quot;&gt;a fantastic Ted Talk about the course&lt;/a&gt; and many Recursers have done it in the past. I'm 2 projects in to the first half of the course (&lt;a href=&quot;https://www.coursera.org/learn/build-a-computer/home/welcome&quot;&gt;Coursera link&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The premise is that you start with a &lt;code&gt;Nand&lt;/code&gt; (&quot;Not And&quot;) logic gate. The first project, you build other elementary logic gates from the &lt;code&gt;Nand&lt;/code&gt; gate (e.g. &lt;code&gt;Not(x) = x Nand x&lt;/code&gt;, furthermore &lt;code&gt;x And y = Not(x Nand y)&lt;/code&gt;; etc.) The 12th and last project, you complete the operating system that you have built up from the &lt;code&gt;Nand&lt;/code&gt; gate, with the 10 projects in between filling in all the gaps. You could build tetris (or any similar game) in the completed computer you have built &quot;from scratch&quot;.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/images/nand2tetris_overview.png&quot; alt=&quot;nand2tetris overview&quot;&gt;
    &lt;figcaption class=&quot;figcaption-text&quot;&gt;The Nand2Tetris Overview&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I am excited to keep digging in to the course. At 1 project per week, I'll complete the course just in time! I've heard the last 6 projects are more time intensive than the first 6, so I'm trying to budget time accordingly.&lt;/p&gt;

&lt;p&gt;The other thing I've been sinking time into is a prototype herd immunity simulation in python. &lt;a href=&quot;https://github.com/haack&quot;&gt;Alex Haak&lt;/a&gt; and I are both excited about interactive data visualization and illustrating concepts through interactive online experiences. Our ultimate goal is to publish something on &lt;a href=&quot;https://explorabl.es/&quot;&gt;explorabl.es - Explorable Explanations&lt;/a&gt;. This site is mind blowing. Don't visit it if you don't have a couple hours to kill.&lt;/p&gt;

&lt;p&gt;Initial results for the simulator are really interesting! I came up with a simplified set of rules that give a certain level of complexity while still massively simplifying the real world. &lt;a href=&quot;https://github.com/robinovitch61/herd_immunity&quot;&gt;All the code is here.&lt;/a&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/images/good_immunity.gif&quot; alt=&quot;good immunity simulation&quot;&gt;
    &lt;figcaption class=&quot;figcaption-text&quot;&gt;90% Immunity - Blue Immunity Protec&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/images/bad_immunity.gif&quot; alt=&quot;good immunity simulation&quot;&gt;
    &lt;figcaption class=&quot;figcaption-text&quot;&gt;80% Immunity - Red Sickness Attac&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Alex and I will be working on porting a modified version of this logic in to an awesome interactive data visualization - Alex is great with React, javascript, html, css, and general design so I'm excited to learn a lot from him!&lt;/p&gt;

&lt;p&gt;A mostly complete set of rules for the model:&lt;/p&gt;

&lt;i&gt;
&lt;p&gt;1. Number of agents is &lt;code&gt;GRID_WIDTH * GRID_HEIGHT = NUM_AGENTS&lt;/code&gt;. Each point in the rectangular grid is occupied by an agent.&lt;/p&gt;

&lt;p&gt;2. Agents are randomly assigned an &lt;code&gt;IMMUNE&lt;/code&gt; status, either 0 (susceptible) or 1 (immune), at the beginning. &lt;code&gt;NUM_IMMUNE_START = PERC_IMMUNE_START * NUM_AGENTS&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3. Agents are initially randomly flagged as sick, with &lt;code&gt;NUM_SICK_START = PERC_SICK_START * NUM_AGENTS.&lt;/code&gt; Immune agents cannot be initially flagged as sick.&lt;/p&gt;

&lt;p&gt;4. All agents that aren't immune or sick are set as initially healthy.&lt;/p&gt;

&lt;p&gt;5. At each timestep, agents connect with some of the agents around them, with probability of connecting to each agent within their &lt;code&gt;CONNECTION_DISTANCE&lt;/code&gt; being &lt;code&gt;PROB_SOCIAL&lt;/code&gt; . This determines the candidate pool a given agent could connect with:&lt;/p&gt;

&lt;p class=&quot;indent&quot;&gt;If &lt;code&gt;CONNECTION_DISTANCE = 1&lt;/code&gt;, agents have a candidate pool of  &lt;= 8, that is, the agents directly around them in a square with themself at the center.&lt;/p&gt;

&lt;p class=&quot;indent&quot;&gt;If &lt;code&gt;CONNECTION_DISTANCE = 2,&lt;/code&gt; agents have a candidate pool of &lt;= 16, that is, the agents directly around them in 2 concentric squares with themself at the center.&lt;/p&gt;

&lt;p class=&quot;indent&quot;&gt;etc. with &lt;br&gt;&lt;code&gt;CONNECTION_DISTANCE &lt;= MAX(GRID_WIDTH, GRID_HEIGHT) - 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;6. If a sick agent connects with a healthy agent who is not immune, probability of infection is &lt;code&gt;PROB_INFECTION.&lt;/code&gt; If a sick agent connects with an immune agent, probability of infection is zero (could change later accounting for imperfect vaccination success rate).&lt;/p&gt;

&lt;p&gt;7. After infections occur, each agent has a chance to recover with &lt;code&gt;PROB_RECOVERY&lt;/code&gt;. Sick agents then have a chance to die with &lt;code&gt;PROB_DEATH&lt;/code&gt;.&lt;/p&gt;
&lt;/i&gt;

&lt;p&gt;Recurse continues to be a fantastic experience, albeit a little overwhelming in the sheer volume of knowledge and opportunities it presents! This is a great problem to have. I am trying to stay focused on diving in to items of greatest interest while not burning myself out before the 12 weeks are up. It's also FLYING by.&lt;/p&gt;</content><author><name></name></author><summary type="html">I have been learning about basic computer architecture (logic gates) and working on a herd immunity simulation.</summary></entry><entry><title type="html">Jupyter With Docker</title><link href="http://localhost:4000/2019/09/27/jupyter-with-docker.html" rel="alternate" type="text/html" title="Jupyter With Docker" /><published>2019-09-27T00:00:00-04:00</published><updated>2019-09-27T00:00:00-04:00</updated><id>http://localhost:4000/2019/09/27/jupyter-with-docker</id><content type="html" xml:base="http://localhost:4000/2019/09/27/jupyter-with-docker.html">&lt;div class=&quot;post&quot;&gt;
&lt;p&gt;I love &lt;a href=&quot;https://www.docker.com&quot;&gt;docker&lt;/a&gt;. It makes environments:&lt;/p&gt;
&lt;div class=&quot;no-bull-list&quot;&gt;
    &lt;p&gt;&lt;li&gt;portable across any machine&lt;/i&gt;&lt;/li&gt;&lt;/p&gt;
    &lt;p&gt;&lt;li&gt;subject to version control (retraceable and recoverable history)&lt;/li&gt;&lt;/p&gt;
    &lt;p&gt;&lt;li&gt;easily deployed and discarded with simple commands&lt;/li&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Jupyter is a great tool that allows for the creation of nice looking documents consisting of ordered code chunks with inline output. It is a fantastic way to get started with programming, clearly step through your workflow, and/or create stories and presentations out of your work. It runs in the browser after you install it on your machine (i.e. you access it with a URL in your web browser).&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/images/jupyterlab_ex.png&quot; alt=&quot;Jupyterlab example.&quot;&gt;
    &lt;figcaption class=&quot;figcaption-text&quot;&gt;From the &lt;a href=&quot;https://jupyterlab.readthedocs.io/en/stable/&quot;&gt;Jupyterlab Docs&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This walkthrough will get you set up with a jupyter lab (or jupyter notebooks classic) environment that is fully customizable, isolated, version controllable and portable using docker.&lt;/p&gt;

&lt;p&gt;If you don't want to use docker, you can always &lt;a href=&quot;https://jupyter.org/install&quot;&gt;install jupyter the classic way&lt;/a&gt;. I like docker for the reasons outlined above (isolation, portability, version controllable, easily deployed/discarded).&lt;/p&gt;

&lt;h2&gt;1: Install Docker&lt;/h2&gt;
&lt;p&gt;To install Docker, you'll have to follow the instructions below:&lt;/p&gt;
&lt;div class=&quot;no-bull-list&quot;&gt;
    &lt;p&gt;&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/docker-for-mac/install/&quot;&gt;Install docker for Mac&lt;/a&gt;&lt;/li&gt;&lt;/p&gt;
    &lt;p&gt;&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/ubuntu/&quot;&gt;Install docker for Ubuntu&lt;/a&gt;&lt;/li&gt;&lt;/p&gt;
    &lt;p&gt;&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/docker-for-windows/install/&quot;&gt;Install docker for Windows 10&lt;/a&gt;&lt;/li&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Once installed, you'll want to open a terminal (or cmd.exe for windows) and enter &lt;code&gt;docker&lt;/code&gt;. You should see a long list of options and commands and not something like &lt;code&gt;command 'docker' not found&lt;/code&gt;. If you see the long list, you're ready to proceed!&lt;/p&gt;

&lt;p&gt;Docker uses the language of images (&lt;i&gt;recipes for containers&lt;/i&gt;) and containers (&lt;i&gt;instances of images&lt;/i&gt;). In this specific case, things like &lt;code&gt;jupyter/minimal-notebook&lt;/code&gt; and &lt;code&gt;jupyter/pyspark-notebook&lt;/code&gt; are &lt;b&gt;images&lt;/b&gt; while our &lt;b&gt;container&lt;/b&gt; will just be called &lt;code&gt;juptyer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I like to think of a container as an isolated environment that my app/service (in this case, jupyter) will run in, almost entirely isolated from the rest of my host machine.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/images/docker-infrastructure.png&quot; alt=&quot;Docker Infrastructure.&quot;&gt;
    &lt;figcaption class=&quot;figcaption-text&quot;&gt;From Docker's &lt;a href=&quot;https://www.docker.com/resources/what-container&quot;&gt;What is a Container?&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 class=&quot;h2-text&quot;&gt;2: Clone the &lt;code&gt;docker-stacks&lt;/code&gt; Repo&lt;/h2&gt;
&lt;p&gt;You'll need git for this step, which you can &lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&quot;&gt;install here&lt;/a&gt; if you don't already have it. You can check by typing &lt;code&gt;git&lt;/code&gt; in to the terminal and seeing if the command is found.&lt;/p&gt;

&lt;p&gt;What you'll clone is &lt;a href=&quot;https://github.com/jupyter/docker-stacks&quot;&gt;Project Jupyter's docker-stacks&lt;/a&gt;. You can also &lt;a href=&quot;https://help.github.com/en/articles/fork-a-repo&quot;&gt;fork&lt;/a&gt; this repo and clone your fork. We'll go through adding a couple files to this repo that will make deployment and customizing things easy. You can use &lt;a href=&quot;https://github.com/robinovitch61/docker-stacks&quot;&gt;my fork&lt;/a&gt; or this tutorial as a reference. To clone the &lt;code&gt;docker-stacks&lt;/code&gt; repo, run the following command in terminal/command prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# run in the desired directory, e.g. ~/projects 
git clone https://github.com/jupyter/docker-stacks.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;docker-stacks&lt;/code&gt; directory we just cloned contains a lot of stuff. Open the folder in your favorite editor or just look at the repo &lt;a href=&quot;https://github.com/jupyter/docker-stacks&quot;&gt;here&lt;/a&gt;. We're going to look at just a few bits of a few important files. First, the &lt;code&gt;Dockerfile&lt;/code&gt; in the &lt;code&gt;/base-notebook&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;############################################
## docker-stacks/base-notebook/Dockerfile ##
############################################

# Copyright (c) Jupyter Development Team.
# Distributed under the terms of the Modified BSD License.

# Ubuntu 18.04 (bionic) from 2019-06-12
# https://github.com/tianon/docker-brew-ubuntu-core/commit/3c462555392cb188830b7c91e29311b5fad90cfe
ARG BASE_CONTAINER=ubuntu:bionic-20190612@sha256:9b1702dcfe32c873a770a32cfd306dd7fc1c4fd134adfb783db68defc8894b3c
FROM $BASE_CONTAINER

LABEL maintainer=&quot;Jupyter Project&quot;
ARG NB_USER=&quot;jovyan&quot;
ARG NB_UID=&quot;1000&quot;
ARG NB_GID=&quot;100&quot;
# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; This &lt;code&gt;Dockerfile&lt;/code&gt; specifies that all jupyter containers will derive from a Linux Ubuntu &quot;bionic&quot; OS (&lt;code&gt;BASE_CONTAINER=ubuntu...&lt;/code&gt;).

&lt;p&gt;If you examine the &lt;code&gt;Dockerfile&lt;/code&gt;s for other directories, you'll see there's a chain of derivations that end in the base-notebook:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# minimal-notebook/Dockerfile, top section:
ARG BASE_CONTAINER=jupyter/base-notebook

# scipy-notebook/Dockerfile, top section:
ARG BASE_CONTAINER=jupyter/minimal-notebook

# datascience-notebook/Dockerfile, top section:
ARG BASE_CONTAINER=jupyter/scipy-notebook

# pyspark-notebook/Dockerfile, top section:
ARG BASE_CONTAINER=jupyter/scipy-notebook
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The docker-stacks team has structured the project so you can specify how complicated of a setup you want out of the box based on what image you select. The &lt;code&gt;jupyter/minimal-notebook&lt;/code&gt; image will contain the simplest installation you need for jupyter to run at all. The &lt;code&gt;jupyter/pyspark-notebook&lt;/code&gt; image will come with a lot more, like a spark installation in the jupyter container file system (likely overkill unless you're using pyspark!). Higher up images in the inheritance tree will include everything below them (e.g. pyspark-notebook contains everything from scipy-notebook, minimal-notebook, and base-notebook).&lt;/p&gt;

&lt;h3&gt;&lt;i&gt;Custom File 1: Docker Compose&lt;/i&gt;&lt;/h2&gt;

&lt;p&gt;The first file we add to the &lt;code&gt;docker-stacks&lt;/code&gt; base repo is &lt;code&gt;docker-compose.yml&lt;/code&gt;. The &lt;code&gt;docker-compose&lt;/code&gt; tool is often used for orchestrating many containers (e.g. &quot;bring up an nginx container and a jupyter container together so nginx can act as a reverse proxy and make the jupyter URL more user-friendly&quot;), but here we only have one container (&lt;code&gt;jupyter&lt;/code&gt;). I like to use &lt;code&gt;docker-compose.yml&lt;/code&gt; as a way of version controlling a &lt;code&gt;docker run&lt;/code&gt; command, which is typically used to bring single containers up. All &lt;code&gt;docker-run&lt;/code&gt; commands can be translated into &lt;code&gt;docker-compose&lt;/code&gt; files and vice versa.&lt;/p&gt;

&lt;p&gt;You'll create a &lt;code&gt;docker-stacks/docker-compose.yml&lt;/code&gt; file that looks something like this (totally up to you to customize!):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;############################################
## docker-stacks/docker-compose.yml ##
############################################
version: '3'

services:

    jupyter:
    container_name: jupyter
    image: jupyter/minimal-notebook # always get `latest` image on docker hub
    # image: jupyter/pyspark-notebook:1386e2046833 # tagged/pinned image example. check for updates here: https://hub.docker.com/r/jupyter/pyspark-notebook/tags.
    volumes:
        - ~/:/home/jovyan/work/
        - ./setup_envs.sh:/usr/local/bin/before-notebook.d/setup_envs.sh
    ports:
        - 9999:9999
    restart: unless-stopped
    environment:
        JUPYTER_ENABLE_LAB: 'yes'
    command: &gt;
        sh -c &quot;bash start-notebook.sh\
                --NotebookApp.token=$JUPYTER_PASSWORD\
                --NotebookApp.notebook_dir=/home/jovyan/work/\
                --port 9999&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Meaning of this witchcraft:&lt;/p&gt;
&lt;div class=&quot;no-bull-list&quot;&gt;
    &lt;p&gt;&lt;code&gt;version '3'&lt;/code&gt;: docker-compose specifies versions. They have slightly different syntax between them&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;services&lt;/code&gt;: our list of services here is just one service called jupyter that will create a container called jupyter&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;image&lt;/code&gt;: here is where you call out which image you want to use, as discussed above&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;volumes&lt;/code&gt;: this is how you break isolation between the container and host environment, linking directories and/or files from the host to the container filesystems. This is important because otherwise when you destroy your container, your files would be lost with it. Syntax is &lt;code&gt;host_path:container_path&lt;/code&gt;. Changes made in either host or container will reflect in the other&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;ports&lt;/code&gt;: jupyter will run on a port in the container. &lt;code&gt;ports&lt;/code&gt; binds the host port to the container port. Syntax is &lt;code&gt;host_port:container_port&lt;/code&gt;&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;restart: unless-stopped&lt;/code&gt;: if your container fails, it will auto-restart unless you stop it with e.g. &lt;code&gt;docker-compose down&lt;/code&gt;&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;environment&lt;/code&gt;: specify environment variables. &lt;code&gt;JUPYTER_ENABLE_LAB&lt;/code&gt; enables jupyter lab by default&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;command&lt;/code&gt;: this is the final command docker will run in the container upon build. &lt;code&gt;NotebookApp.token&lt;/code&gt; password-protects your jupyter instance. The port here should also match the container port in &lt;code&gt;ports&lt;/code&gt; above&lt;/p&gt;
&lt;/div&gt;

&lt;h3&gt;&lt;i&gt;Custom File 2: Setup Script&lt;/i&gt;&lt;/h2&gt;

&lt;p&gt;You may have noticed that the second volume specified in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file is called &lt;code&gt;./setup_envs.sh&lt;/code&gt;. This is a custom startup script that I use to do the following:&lt;/p&gt;
&lt;div class=&quot;no-bull-list&quot;&gt;
    &lt;p&gt;&lt;li&gt;Create environment variables that are accessible in jupyter&lt;/li&gt;&lt;/p&gt;
    &lt;p&gt;&lt;li&gt;Add jupyterlab extensions&lt;/li&gt;&lt;/p&gt;
    &lt;p&gt;&lt;li&gt;Create custom conda environments and link them to jupyter kernels&lt;/li&gt;&lt;/p&gt;
    &lt;p&gt;&lt;li&gt;Run other useful commands in the container upon startup (e.g. configure git, install &lt;code&gt;vim&lt;/code&gt; or &lt;code&gt;svn&lt;/code&gt;, etc.)&lt;/li&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;You'll create a &lt;code&gt;docker-stacks/setup_envs.sh&lt;/code&gt; file that looks something like this (totally up to you to customize!):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;############################################
## example docker-stacks/setup_envs.sh ##
############################################
echo &quot;&quot;
echo &quot;Creating useful environment variables...&quot;
export MYVAR=$MYVAR
export MYVAR2=$MYVAR2
echo &quot;Finished creating useful environment variables!&quot;

echo &quot;&quot;
echo &quot;Adding jupyterlab extensions...&quot;
rm -rf /home/jovyan/work/extensions
mkdir /home/jovyan/work/extensions

# Great extension by calpoly for better markdown formatting in cells: https://github.com/jupytercalpoly/jupyterlab-richtext-mode
git clone https://github.com/jupytercalpoly/jupyterlab-richtext-mode.git /home/jovyan/work/extensions/jupyter-scribe &amp;&amp; \
cd /home/jovyan/work/extensions/jupyter-scribe &amp;&amp; \
npm install &amp;&amp; \
npm run build &amp;&amp; \
jupyter labextension link .

# Rebuild to get extensions to work
jlpm build
jupyter lab build
echo &quot;Added jupyterlab extensions!&quot;

echo &quot;&quot;
echo &quot;Creating kernel py37...&quot;
conda create -n py37 python=3.7.4 pip -y
echo &quot;Finished creating kernel py37!&quot;

# Install packages with pip, otherwise conda's &quot;auto-checking compatibility&quot; algo freaks out (with certain versions of conda)
echo &quot;&quot;
echo &quot;Installing packages in py37...&quot;
source activate py37 &amp;&amp; \
pip install ipykernel &amp;&amp; \
pip install pandas &amp;&amp; \
pip install numpy &amp;&amp; \
pip install scipy &amp;&amp; \
pip install matplotlib &amp;&amp; \
pip install seaborn &amp;&amp; \
echo &quot;Finished installing packages in py37!&quot;

echo &quot;&quot;
echo &quot;Connecting env to kernel...&quot;
source activate py37 &amp;&amp; python -m ipykernel install --user --name py37 --display-name &quot;py37&quot;
source activate py37 # must activate/deactivate once to have changes displayed
source activate base
echo &quot;Connected env to kernel!&quot;

cat &lt;&lt; &quot;EOF&quot;

WELCOME!

     ██╗██╗   ██╗██████╗ ██╗   ██╗████████╗███████╗██████╗
     ██║██║   ██║██╔══██╗╚██╗ ██╔╝╚══██╔══╝██╔════╝██╔══██╗
     ██║██║   ██║██████╔╝ ╚████╔╝    ██║   █████╗  ██████╔╝
██   ██║██║   ██║██╔═══╝   ╚██╔╝     ██║   ██╔══╝  ██╔══██╗
╚█████╔╝╚██████╔╝██║        ██║      ██║   ███████╗██║  ██║
╚════╝  ╚═════╝ ╚═╝        ╚═╝      ╚═╝   ╚══════╝╚═╝  ╚═╝

Take it from here...

EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;u&gt;Dirty details on how this runs just by placing it in the container:&lt;/u&gt; the &lt;code&gt;start-notebook.sh&lt;/code&gt; script run by the &lt;code&gt;docker-compose&lt;/code&gt; command will subsequently run &lt;code&gt;start.sh&lt;/code&gt;. Both these shell scripts are in the &lt;code&gt;base-notebook&lt;/code&gt; directory. The &lt;code&gt;start.sh&lt;/code&gt; script has &quot;hooks&quot; for running scripts that are in the &lt;code&gt;/usr/local/bin/before-notebook.d&lt;/code&gt;. &lt;b&gt;All this to say that &lt;code&gt;setup_envs.sh&lt;/code&gt; will be run as part of your jupyter setup&lt;/b&gt; because we put it in the &lt;code&gt;/usr/local/bin/before-notebook.d&lt;/code&gt; directory in the jupyter container!&lt;/p&gt;

&lt;p&gt;Note that you could totally exclude the &lt;code&gt;setup_envs.sh&lt;/code&gt; script and volume and your deployment would be fully functioning. I like to use this method as a way of customizing my jupyter setup in a version-controlled manner. Rather than installing a new python package in my base environment or installing a system package every time manually and trying to remember what I did when I port to a new machine, I'll edit the &lt;code&gt;setup_envs.sh&lt;/code&gt; script, commit and push to my fork, then redeploy on whatever machine I want and get the exact same setup.

&lt;h2&gt;3: Bring Up the Jupyter Container&lt;/h2&gt;

&lt;p&gt;If you've gotten this far, you're basically done! The one thing we're missing is to set a password/token. In terminal, run this command with your custom password. If you don't do this, &lt;code&gt;docker-compose&lt;/code&gt; will warn you at the next step.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;export JUPYTER_PASSWORD=$MY_CUSTOM_PASSWORD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now navigate to the &lt;code&gt;docker-stacks&lt;/code&gt; directory in a terminal and run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;-d&lt;/code&gt; flag stands for &quot;detached&quot;, and ensures the &lt;code&gt;jupyter&lt;/code&gt; container will stay running even if you exit the terminal.&lt;/p&gt;

&lt;p&gt;You can now run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker logs -f jupyter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;-f&lt;/code&gt; flag standing for &quot;follow&quot;. Watch the progress in your terminal as your jupyter container is instantiated and your &lt;code&gt;setup_envs.sh&lt;/code&gt; script is run (if you made one).&lt;/p&gt;

&lt;p&gt;Once you see something like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[I 16:19:04.574 LabApp] The Jupyter Notebook is running at:
[I 16:19:04.574 LabApp] http://3204808557f5:9999/?token=...
[I 16:19:04.575 LabApp]  or http://127.0.0.1:9999/?token=...
[I 16:19:04.575 LabApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You're ready to go! Navigate to &lt;a href=&quot;http://127.0.0.1:9999&quot;&gt;http://127.0.0.1:9999&lt;/a&gt; (or whatever port you specified if different than 9999) where you should see a page that prompts you for your password (set with the &lt;code&gt;JUPYTER_PASSWORD&lt;/code&gt; environment variable earlier).&lt;/p&gt;

&lt;p&gt;You have a fully functioning and replicable jupyter environment, portable to any machine that runs docker! Remember that even though your container has access to your host file system through the volume we created, your file system isn't (and shouldn't be) version controlled with the &lt;code&gt;docker-stacks&lt;/code&gt; directory. Version control your projects separately.&lt;/p&gt;

&lt;i&gt;Further thoughts:
&lt;div class=&quot;no-bull-list&quot;&gt;
    &lt;p&gt;&lt;li&gt;Another approach to version controlled customization could be to modify the Dockerfiles themselves. I prefer the &lt;code&gt;setup_envs.sh&lt;/code&gt; script approach as rebuilding the images is time and disk space intensive. Modifying Dockerfiles, though, is a totally valid approach.&lt;/li&gt;&lt;/p&gt;
    &lt;p&gt;&lt;li&gt;If you get stuck on anything in this process or see that I've been wrong/unclear about something, please open an issue on the source of this website &lt;a href=&quot;https://github.com/robinovitch61/robinovitch61.github.io&quot;&gt;here&lt;/a&gt;&lt;/li&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/i&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">I love docker. It makes environments: portable across any machine subject to version control (retraceable and recoverable history) easily deployed and discarded with simple commands</summary></entry><entry><title type="html">Recurse 00 (it begins)</title><link href="http://localhost:4000/2019/09/25/recurse-00-(it-begins).html" rel="alternate" type="text/html" title="Recurse 00 (it begins)" /><published>2019-09-25T00:00:00-04:00</published><updated>2019-09-25T00:00:00-04:00</updated><id>http://localhost:4000/2019/09/25/recurse-00-(it-begins)</id><content type="html" xml:base="http://localhost:4000/2019/09/25/recurse-00-(it-begins).html">&lt;div class=&quot;post&quot;&gt;
&lt;p&gt;It is day 3 at the Recurse Center (RC)!&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/images/me-rust-haskell.gif&quot; alt=&quot;Me using Rust/Haskell&quot;&gt;
    &lt;figcaption class=&quot;figcaption-text&quot;&gt;Me experimenting with Haskell and Rust&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It has been a whirlwind of orientation, meeting awesome people, learning about (and about the existence of) new cool things, setting up and settling in.&lt;/p&gt;

&lt;p&gt;This was my second day here:&lt;/p&gt;
&lt;div class=&quot;no-bull-list&quot;&gt;
    &lt;p&gt;&lt;i&gt;8-9am: &lt;/i&gt;Research blogging tools to create this very website. Decide on Jekyll + github pages + namecheap domain as a good solution&lt;/p&gt;
    &lt;p&gt;&lt;i&gt;9-10am: &lt;/i&gt;Update MacOS to Mojave after experiencing ruby-related jekyll issues&lt;/p&gt;
    &lt;p&gt;&lt;i&gt;10-11am: &lt;/i&gt;Using &lt;a href=&quot;https://jekyllrb.com/docs/step-by-step/01-setup/&quot;&gt;this great tutorial&lt;/a&gt;, get &lt;code&gt;jekyll&lt;/code&gt; and &lt;code&gt;bundler&lt;/code&gt; installed. Get &lt;code&gt;jekyll serve&lt;/code&gt; working and start developing this blog&lt;/p&gt;
    &lt;p&gt;&lt;i&gt;11-12pm: &lt;/i&gt;Pair programming workshop! Create a version of &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&quot;&gt;Conway's Game of Life&lt;/a&gt; in python. &lt;a href=&quot;https://gist.github.com/robinovitch61/8a094c15f8cc28ec9218a1baf6b211c6#file-game_of_life-py&quot;&gt;Gist here.&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;&lt;i&gt;12-12:15pm: &lt;/i&gt;Discuss wind speed measurements using an arduino with someone working on an auto-steering sailboat. Yay mech eng knowledge!&lt;/p&gt;
    &lt;p&gt;&lt;i&gt;12:15-1pm: &lt;/i&gt;Lunch chat with someone, discuss what Rust is and why people are excited about it (memory and type safety)&lt;/p&gt;
    &lt;p&gt;&lt;i&gt;1-2pm: &lt;/i&gt;Participated in an &quot;Intro to Haskell&quot; workshop. No loops, variables don't vary, unclear code execution order...what is this language??&lt;/p&gt;
    &lt;p&gt;&lt;i&gt;2-3pm: &lt;/i&gt;Continue site development&lt;/p&gt;
    &lt;p&gt;&lt;i&gt;3-4pm: &lt;/i&gt;Category theory discussion group. First foray into theoretical math in a long time. Approachable intro by the few folks with deeper knowledge on the topic&lt;/p&gt;
    &lt;p&gt;&lt;i&gt;4-5:30pm: &lt;/i&gt;Further introductory Haskell chat, help solidify some core concepts intro'd earlier&lt;/p&gt;
    &lt;p&gt;&lt;i&gt;5:30-6:30pm: &lt;/i&gt;Non-technical presentations (7 mins max) - folks did them on cross stitching, rube goldberg machine demo, cats, contact juggling, architecture, and the origin of the English language&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;It's everything I had hoped for and more.&lt;/p&gt;

&lt;p&gt;The space is incredible, with tons of work stations, a large library, 5 or 6 super vintage but functioning computers to play with, breakout rooms, an LED project you can control via your computer, a nap space, and clean and functional kitchen/lunch area.&lt;/p&gt;

&lt;p&gt;My goals here are (in no particular order):&lt;/p&gt;
&lt;div class=&quot;no-bull-list&quot;&gt;
    &lt;p&gt;&lt;li&gt;Gain a stronger foundation in computer science theory (algorithms, data structures, complexity management, etc.)&lt;/li&gt;&lt;/p&gt;
    &lt;p&gt;&lt;li&gt;Continue to build on my statistics and probability knowledge, likely with some forays in to AI projects&lt;/li&gt;&lt;/p&gt;
    &lt;p&gt;&lt;li&gt;Learn of more &quot;unknown unkowns&quot; - concepts that I didn't know existed but are incredibly interesting and/or useful&lt;/li&gt;&lt;/p&gt;
    &lt;p&gt;&lt;li&gt;Reshape my assumptions about education and what the learning process looks like&lt;/li&gt;&lt;/p&gt;
    &lt;p&gt;&lt;li&gt;Become a much more effective programmer so I can kick ass at my next role&lt;/li&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Some pitfalls I'd like to avoid:&lt;/p&gt;
&lt;div class=&quot;no-bull-list&quot;&gt;
    &lt;p&gt;&lt;li&gt;Have my time dominated by learning tools rather than understanding concepts and theory. Learning a tool (e.g. a new programming language, framework, library, etc.) can be done when it's time to implement conceptually complete visions&lt;/li&gt;&lt;/p&gt;
    &lt;p&gt;&lt;li&gt;Stretch myself too thin by trying to learn everything and then feeling like I'm not really learning anything&lt;/li&gt;&lt;/p&gt;
    &lt;p&gt;&lt;li&gt;Get sucked in by &quot;the hype&quot; around a language or domain without properly evaluating whether or not it is the best way to spend my time at my current stage of development&lt;/li&gt;&lt;/p&gt;
    &lt;p&gt;&lt;li&gt;Lose steam by pushing too hard, feeling like I'm not succeeding, or failing to achieve my incremental goals&lt;/li&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;I'm so excited! Pitter patter...&lt;/p&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">It is day 3 at the Recurse Center (RC)!</summary></entry></feed>